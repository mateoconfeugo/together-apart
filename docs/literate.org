#+SETUPFILE: themes/org-minimal-theme.setup
#+TITLE:  API Endpoints Development / Operations Doc for together-apart Project
#+AUTHOR: Matthew Burns
#+EMAIL: matthewburns@gmail.com
#+DATE: <2018-05-01 Tue>
#+LANGUAGE: en
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./org.css"/>
* Description
This application provides a basic authenticated  REST like service dividing strings into odd and
even arrays and rejoining arrays into original strings.
* Application specification
[[file:///home/mburns/Downloads/backend_coding_exercise.pdf][Coding Exercise Specification]]
**  General Requirements
| Spec ID | Description                                                                             |
|---------+-----------------------------------------------------------------------------------------|
| G0      | Create valid credentials via register service https://interview-api.shiftboard.com/auth |
| G1      | All requests must include basic auth.                                                   |
| G2      | Validated against at auth service https://interview-api.shiftboard.com/auth.            |
| G3      | Unsuccessful attempts return 401                                                        |
| G4      | POSTs are a JSON formated object                                                        |
| G5      | Required SHA1 posted content digest query parameter, signature, return 403 if  invalid  |
| G6      | Missing parameters return 422                                                           |
| G7      | Operate in a non-sticky, load balanced environment.                                     |
**  API Endpoint Function Requirements
| Spec ID | Description                                                                                     |
|---------+-------------------------------------------------------------------------------------------------|
| F1      | Split string into even and odd character arrays, Assume first character 1, is odd.              |
| F2      | The user/pass will successfully authenticate against https://interview-api.shiftboard.com/auth. |
| F3      | Last result depending on method called last                                                     |

* Acceptance Criteria
#+BEGIN_SRC sh :results output  html
prove -v -I/home/mburns/projects/bb/shiftboard/Audition-WebService/lib Audition-WebService/t/exported_test.t
#+END_SRC

#+BEGIN_SRC sh
Audition-WebService/t/exported_test.t ..
# Subtest: business unit tests.
    1..3
    ok 1 - Odd and even combined into a single numberical sequence
    ok 2 - Numbers split into two sequences these the odd
    ok 3 - Numbers split into two sequence these are the even
ok 1 - business unit tests.
# Subtest: API usage mocking registered auth. see F1, F2, F3, G0, G1, G2, G3, G4, G5, G6
    1..10
    ok 1 - POST http://TBD:TBD@127.0.0.1:35837/split?signature=%3AjQ%C2%BF%C3%87%16%C3%A3j7%C3%A7%19_V%C2%8A%C3%B7u%27%3Fm%22
    ok 2 - 200 OK
    ok 3 - POST http://TBD:TBD@127.0.0.1:35837/split?signature=%3AjQ%C2%BF%C3%87%16%C3%A3j7%C3%A7%19_V%C2%8A%C3%B7u%27%3Fm%22
    ok 4 - 422 Unprocessable Entity
    ok 5 - POST http://TBD:TBD@127.0.0.1:35837/join?signature=%C2%B6D%C3%85%18%3B5%C3%8E%C2%86%0B%0Ef%C3%8D%04%5C%126%C3%94%05%C2%A5%C3%90
    ok 6 - 200 OK
    ok 7 - POST http://TBD:TBD@127.0.0.1:35837/join?signature=%C2%B6D%C3%85%18%3B5%C3%8E%C2%86%0B%0Ef%C3%8D%04%5C%126%C3%94%05%C2%A5%C3%90
    ok 8 - 422 Unprocessable Entity
    ok 9 - GET http://TBD:TBD@127.0.0.1:35837/lastResponse
    ok 10 - Basic auth check on each endpoint called the mock auth webservice
ok 2 - API usage mocking registered auth. see F1, F2, F3, G0, G1, G2, G3, G4, G5, G6
1..2
ok
All tests successful.
Files=1, Tests=2,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.20 cusr  0.02 csys =  0.24 CPU)
Result: PASS
#+END_SRC
* Application  Logic
#+NAME: join-functionality
#+BEGIN_SRC perl :noweb yes
sub together {
    my ($odd, $even) = @_;
    return undef
      unless scalar @$odd > 0 && scalar @$even > 0;
    return join '', zip(@$odd, @$even);
}
#+END_SRC

#+NAME: split-functionality
#+BEGIN_SRC perl :noweb yes
sub apart {
    my @array = split('', $_[0]);
    return undef
      unless scalar @array > 0;
    # bitwise AND array position select odd
    my @odd = map {"$_"} @array[grep {!($_ & 1)} 0..$#array];
    # invert logic to take even
    my @even = map {"$_"} @array[grep {($_ & 1)} 0..$#array];
    return {even => \@even, odd => \@odd};
}
#+END_SRC


#+NAME: api-f2
#+BEGIN_SRC perl :noweb yes
    post '/join'=>sub {
        my $c  = shift;
        my ($odd, $even) =  @{$c->req->json}{qw(odd even)} || undef;
        my $join = together($odd, $even);
        return $c->render(json=>{message=>"Parameter required"})->rendered(422) unless $join;
        $c->session('returned_last'=>$join);
        return $c->render(json=>$join)->rendered(200);
    };
#+END_SRC


#+NAME: api-f1
#+BEGIN_SRC perl :noweb yes
    post '/split'=>sub {
        my $c  = shift;
        my $split = apart($c->req->json->{string}) || undef;
        return $c->render(json=>{message=>"Parameter Invalid"})->rendered(422)
          unless $split;
        $c->session('returned_last'=>$split);
        return $c->render(json=>$split)->rendered(200);
    };
#+END_SRC

#+NAME: api-f3
#+BEGIN_SRC perl :noweb yes
get '/lastResponse'=>sub {$_[0]->render(json=>$_[0]->session('returned_last'))->rendered(200)};
#+END_SRC
** Basic Authentication using webservice
*** Code
#+NAME: api-basic-authentication
#+BEGIN_SRC perl :noweb yes
under(sub { my $c = shift; # Basic Authentication for each request
            my ($username, $password) = split(':',  $c->req->url->to_abs->userinfo);
            $c->ua->get(Mojo::URL->new($ENV{"auth_url"} || app->config('auth_url'))
                        ->query({username=>$username, password=>$password})
                        => {Accept=>'application/json'})->res == 200
                        ? return 1
                        : return $c->render(json=>{message=>"Invalid"})->rendered(401)});
#+END_SRC
*** Test
#+NAME: auth-testing
#+BEGIN_SRC perl :noweb yes
subtest 'testing registered authentication' => sub {
    plan tests => 2;
    my $module = Test::MockModule->new('Audition::WebService');
    $module->mock('apart', sub { return $desired_apart });
    $module->mock('together', sub { return $desired_together });
    Module::Name::subroutine(@args);
    my $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/split');
    $url->query({signature => $good_signature});
    $t->post_ok($url=>json=>$test_data)->status_is(200);
    $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/join');
    $t->post_ok($url=>json=>$test_data)->status_is(200);
    $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/lastResult');
    $t->post_ok($url=>json=>$test_data)->status_is(200);
};
#+END_SRC

** API Interface
#+NAME: api-interface
#+BEGIN_SRC perl :noweb yes
    <<api-f1>>
    <<api-f2>>
    <<api-f3>>
#+END_SRC
*** Error Codes
 - G3 Application Functionality: return 401 on unsuccessful
 - G5 Application Functionality: return 403 on invalid sha1
 - G6 Application Functionality: return 422 on missing parameters
**  API Tests
#+NAME: api-tests
#+BEGIN_SRC perl :noweb yes
    $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/join');
    $t->post_ok($url=>json=>$test_data)->status_is(200);
    my $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/split');
    $url->query({signature => $good_signature});
    $t->post_ok($url=>json=>$test_data)->status_is(200);
    $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/lastResult');
    $t->post_ok($url=>json=>$test_data)->status_is(200);
#+END_SRC
**  Access Management
 #+NAME: user-validation
 #+BEGIN_SRC perl
    under sub { # Valid API Requirement Assertions
        my $c = shift;
        my $signature = $c->param('signature') || undef;
        my $string =  $c->req->json->{string} || undef;
        return $c->render(json=>{message=>"Parameter required)"})->rendered(422) unless $string;
        return $c->render(json=>{message=>"Checksum failure"})->rendered(403) unless $signature && ($signature eq sha1($string));
    };

 #+END_SRC
** Application Code
 #+NAME: app-biz-domain-functionality
 #+BEGIN_SRC perl :noweb yes :mkdir yes :tangle Audition-WebService/lib/Audition/WebService.pm
<<dependencies>>
plugin 'Config';

<<split-functionality>>
<<join-functionality>>
<<api-basic-authentication>>

group {
    <<user-validation>>
    <<api-interface>>
};
<<run-unless-caller>>
 #+END_SRC
* Usage
#+NAME: run-unless-caller
#+BEGIN_SRC perl
sub run {
    app->start;
}

run() unless caller();
1;
#+END_SRC
* Configuration
#+NAME: config
#+BEGIN_SRC perl :noweb yes :mkdir yes :tangle Audition-WebService/lib/Audition/WebService.conf
{
 auth_url => 'https://interview-api.shiftboard.com/auth',
 name => 'partition_combiner',
 register_url => 'https://interview-api.shiftboard.com/register'
}
#+END_SRC

* System Integration
**  Systemd
*** daemon
#+BEGIN_SRC ini :mkdir yes :tangle etc/systemd
[Unit]
Description=together apart application
After=network.target

[Service]
Type=simple
ExecStart=/home/ubuntu/together-apart/script/together-apart daemon -m production -l http://*:3000

[Install]
WantedBy=multi-user.target
#+END_SRC

 #+BEGIN_SRC sh
systemctl stop together-apart
systemctl start together-apart
systemctl status together-apart
 #+END_SRC
*** hypnotoad
#+BEGIN_SRC ini :mkdir yes :tangle /etc/hypnotoad
[Unit]
Description=together-apart application
After=network.target

[Service]
Type=forking
PIDFile=/home/ubuntu/together-apart/script/hypnotoad.pid
ExecStart=/usr/bin/hypnotoad /home/ubuntu/together-apart/script/together-apart
ExecReload=/usr/bin/hypnotoad /home/ubuntu/together-apart/script/together-apart
KillMode=process

[Install]
WantedBy=multi-user.target
#+END_SRC
* Environment Variables
 #+BEGIN_SRC sh :mkdir app_env_vars.sh
export partition_combiner_auth_url='https://interview-api.shiftboard.com/auth';
export partition_combiner_register_url='https://interview-api.shiftboard.com/register';
export MOJO_REVERSE_PROXY='http://localhost:80';
 #+END_SRC

 #+BEGIN_SRC sh
sudo apt-get install libmojolicious-perl  libdigest-sha-perl liblist-moreutils-perl libtry-tiny-perl
 #+END_SRC
* Perl Dependencies
#+NAME: dependencies
#+BEGIN_SRC perl
use strict;
use warnings;

package Audition::WebService;
use Digest::SHA qw(sha1);
use List::MoreUtils qw(zip);
#use Mojolicious::Lite;
use Mojo::Base "Mojolicious";
use Mojo::URL;
use Mojo::Util qw(secure_compare);
use Riemann::Client;
use sigtrap qw/handler signal_handler normal-signals/;
 #+END_SRC
* Test Suite
#+NAME: app-test-suite
#+BEGIN_SRC perl :noweb yes  :mkdirp yes :tangle Audition-WebService/t/basic.t
use Audition::WebService;
use Digest::SHA  qw(sha1);
use Mojo::JSON qw(decode_json encode_json);
use Test::Mojo;
use Test::MockModule
use Test::More;

use FindBin;
#require "$FindBin::Bin/../lib";
use lib "/home/mburns/projects/bb/shiftboard/Audition-WebService/lib";

my $desired_together = "split me";
my $desired_apart = {'even'=>['p', 'i', ' ', 'e'], 'odd'  => ['s', 'l', 't', 'm']};
my $apart_got = apart($desired_together);
my $got_together = together($test_output->{'odd'}, $test_output->{'even'});
is($got_together, $desired_together, 'Odd and even combined into a single numerical sequence');
is($apart_got, $desired_apart, 'Numbers split into two sequence based on being odd or even');

my $t = Test::Mojo->new;

<<auth-testing>>

subtest 'testing api app biz domain functionality' => sub {
    plan tests => 2;
    my $module = Test::MockModule->new('Audition::WebService');
        $module->mock('check_credentials', sub { return 1 });
    Module::Name::subroutine(@args);
    my $test_data = {'string'=>$desired_together};
    my $good_signature = sha1($desired_together);
    my $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/split');
    $url->query({signature => $good_signature});
    <<api-tests>>
};
#+END_SRC
* Provision
** Platform Runtime Orchestration
*** Common Scenarios
**** Typical Release
**** Rollback
**** Cherry Pick
**** Hot Fix
** Packages
 #+BEGIN_SRC sh
sudo apt-get install libmojolicious-perl  libdigest-sha-perl liblist-moreutils-perl libtry-tiny-perl
 #+END_SRC

* Release
**  Push
#+BEGIN_SRC sh
git push origin release-next
#+END_SRC

#+BEGIN_SRC sh
git push origin release-next
#+END_SRC
* Deployment
**  Package
#+BEGIN_SRC sh
dpkg together-apart \
--pre-invoke test-features-absent \
--post-invoke test-features-present \
--status-fd ./current-status \
--build ../dist/
#+END_SRC
#+BEGIN_SRC sh
dpkg together-apart --pre-invoke test-features-absent --post-invoke test-features-present --status-fd ./current-status --build ../dist/
#+END_SRC

#+RESULTS:


** logging/rotation
** system user
** groups
** var/data
** auditing
** software defined storage
** monitoring
** Reverse Proxy Server
In front of app acting as the endpoint accessible by external clients.
 - terminating SSL connections from the outside,
 - limits the number of concurrent open sockets towards the app
 - balancing load across multiple instances,
 - supporting several applications through the same IP/port.
** SSL
#+NAME: host-ssl-config
#+BEGIN_SRC perl
 hypnotoad => {
    listen  => ['https://*:443?cert=/etc/server.crt&key=/etc/server.key'],
    proxy   => 1,
    workers => 10
  }
#+END_SRC
*** starting secure server
#+BEGIN_SRC sh
$ ./script/together_apart daemon -l https://[::]:443
#+END_SRC
** built-in api devops endpoint
Target for github app repo release hook trigger post. Existing running version of the application
sets up and restarts public facing webserver proxying with updated symbolic links for
the site-availabe and sites-enabled point to the next blue green service pair in the the versioned
deployment release chain.
** Nginx
#+BEGIN_SRC config
upstream together_apart {
  server 127.0.0.1:3000;
}
server {
  listen 80;
  server_name localhost;
  location / {
    proxy_pass http://together_apart;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
}
#+END_SRC
** restart
#+BEGIN_SRC sh
hypnotoad ./script/together_apart
#+END_SRC
** Rolling Deployment
*** Start first version
#+BEGIN_SRC sh
./script/together_apart prefork -P /tmp/first.pid -l http://*:3000?reuse=1
#+END_SRC
*** Start second version
#+BEGIN_SRC sh
./script/together_apart prefork -P /tmp/second.pid -l http://*:3000?reuse=1
#+END_SRC
*** Kill the first version
#+BEGIN_SRC sh
kill -s TERM `cat /tmp/first.pid`
#+END_SRC
* Appendix A: Literate DevOps Document Overview
Applying to dev ops task, using org-mode in emacs to facilate  Knuth outlined ideas of literate programming
capture and automate the operationation tasks of of developing and maintaining a microservice.

This means using the code blocks feature of of org mode to weave together, often as a first draft,
the tasks of setting up these types of programs.  Then having a nice way to make it pretty.

The tangle untangle feature are helpful for publishing out code especially during the start of a project
as its easy to make drastic namespace refactor org things; however, as the project matures less of the the
devops usefulness comes from anything relating to the autocode publishing which usually ceases pretty quick.

Restful projects are nice because it creates a nice method to access the application directly from the the
document providing a redumentary but powerful user interface.

Providing a couple of simple devop endpoints into the application and continous delivery loop comes
about as the feedback resulting from connecting the github repo webhooks triggered by a merge request into master
to a deployment of the new version and subsequent hand off of the service to the new version.

Adding a couple of flourishes using packages and socket reuse make the software development process easier and without
the need of heavy environments once the system is running in production.

** Goals
*** eliminate common technical debt (versioning, release, deploy, documentation, test)
*** automatically maintain and update
*** make it easy to run/work on the software
Dev projects like any other open source github project fork
package correctly for debian and incorporate into systemd management
*** checklists to help foster better development security practices
Harvest low hanging fruit that yeilds nice to have features while in development
 - forensic system analysis via instant replay using atop archive fils + auditd + log files + application virtualized containerization
 - providing a swagger api that allows dev ops tasks to be easily scripted via your favorite language as a client
   creates a feedback path which makes what you can do directly from the devops docs directly or run as a script by
   running emacs as a dynamic language from called from a shell script.  This active documentation is a playbook - an automated one.
 - Use a push system based on ssh and public/private key access.
** Features incorporated into the document  [12/20]
 - [X] Publishes code into source files
 - [-] Releases the code into the upstream code repository
 - [-] Deploys the code onto the desired runtime platorm (dev, qa, stg, prd)
 - [X] Provisions the runtime infrastructure and like artifacts the application is dependent upon.
 - [X] Capture the functional requirements in automated testable form
 - [-] Understand engineering decisions behind the implementation, design, methodology testing
 - [X] Define the way features are deployed into new versions of this WebService
 - [X] Run tests
 - [X] Provides application documentation
 - [-] Provide development history
 - [X] Provides a reduamentry cli interface to devops/maintence tasks
 - [X] Sets up and runs system from src control repo (github)
 - [X] Provide  way to refer and collaborate among developers
 - [-] Continous Delivery with rollback
 - [X] Worksheet to aid in project management aspects of software development
 - [X] Bridge that first draft proof of concept devops task into part of the crm/orchestration process
 - [X] Allows the stitching together of many pre- [-]existing tools (git, dpkg,
 - [-] Incorporate others work via pull requests in a timely fashion
 - [-] Define Idioms
 - [-] Capture domain specific paculiarities
* Appendix B: System 3rd Party Dependencies/Requirements
  - Local: Running in the context of a ordinary linux system account
  - A single VPC, with the usual 3 security group setup - internal, web, and bastion.
  - [[https://www.terraform.io][Terraform]] and for provisioning infrastructure.
  - [[https://www.packer.io][Packer]] to build a single general-purpose base AMI.
  - API web application
  - Common library components
  - Github hooks to deploy
  - Riemann monitoring integration.
* Appendix C: REPL /Debugger
#+BEGIN_SRC sh
perl -d -I/home/mburns/projects/bb/shiftboard/Audition-WebService/lib  Audition-WebService/lib/Audition/WebService.pm daemon
#+END_SRC
** Testing G7 - Setting up non sticky environment
#+BEGIN_SRC perl
# Listen on two ports with HTTP and HTTPS at the same time
$daemon->listen(['http://*:3000', 'https://*:4000']);
# Listen on release-next port
# 4461 release-next -> new version
# 4460 master -> existing prd version
my $port = $daemon->listen(['http://127.0.0.1'])->start->ports->[0];
# Run multiple web servers concurrently
my $daemon1 = Mojo::Server::Daemon->new(listen => ['http://*:3000'])->start;
my $daemon2 = Mojo::Server::Daemon->new(listen => ['http://*:4000'])->start;
Mojo::IOLoop->start unless Mojo::IOLoop->is_running;
#+END_SRC
