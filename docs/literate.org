#+SETUPFILE: themes/org-minimal-theme.setup
#+TITLE:  API Endpoints Development / Operations Doc for together-apart Project
#+AUTHOR: Matthew Burns
#+EMAIL: matthewburns@gmail.com
#+DATE: <2018-05-01 Tue>
#+LANGUAGE: en
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./org.css"/>
* Description
This application provides a basic authenticated  REST like service dividing strings into odd and
even arrays and rejoining arrays into original strings.
* [[file:///home/mburns/Downloads/backend_coding_exercise.pdf][Application Specification]]
**  General Requirements
| Spec ID | Description                                                                             |
|---------+-----------------------------------------------------------------------------------------|
| G0      | Create valid credentials via register service https://interview-api.shiftboard.com/auth |
| G1      | All requests must include basic auth.                                                   |
| G2      | Validated against at auth service https://interview-api.shiftboard.com/auth.            |
| G3      | Unsuccessful attempts return 401                                                        |
| G4      | POSTs are a JSON formated object                                                        |
| G5      | Required SHA1 posted content digest query parameter, signature, return 403 if  invalid  |
| G6      | Missing parameters return 422                                                           |
| G7      | Operate in a non-sticky, load balanced environment.                                     |
**  API Endpoint Function Requirements
| Spec ID | Description                                                                                     |
|---------+-------------------------------------------------------------------------------------------------|
| F1      | Split string into even and odd character arrays, Assume first character 1, is odd.              |
| F2      | The user/pass will successfully authenticate against https://interview-api.shiftboard.com/auth. |
| F3      | Last result depending on method called last                                                     |

* Acceptance Criteria
#+BEGIN_SRC sh :results output raw
:curl -X POST -u USER:PASS \
http://matt-burns.shftbrd.com/split?signature=04e74f3b8cfcf0b502ff701a9b5f0b98ece0d3b4 \
-d '{"string":"split me"}'
#+END_SRC

#+BEGIN_SRC sh :results output raw
curl -X POST -u USER:PASS \
http://localhost/split?signature=04e74f3b8cfcf0b502ff701a9b5f0b98ece0d3b4 \
-d '{"string":"split me"}'
#+END_SRC

#+RESULTS:
{"message":{"odd":["s","l","t","m"],"even":["p","i"," ","e"]}}

#+BEGIN_SRC sh :results output raw
curl -X POST -u USER:PASS \
https://localhost/split?signature=04e74f3b8cfcf0b502ff701a9b5f0b98ece0d3b4 \
-d '{"string":"split me"}'
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh
curl -X POST -u USER:PASS \
http://matt-burns.shftbrd.com/join?signature=6edd74450aa9206c4ba0b8c009de382a3e91f404 \
-d '{"odd":["s","l","t","m"], "even":["p","i"," ","e"]}'
#+END_SRC

#+BEGIN_SRC sh :results output raw
curl -X POST -u USER:PASS \
http://localhost/join?signature=6edd74450aa9206c4ba0b8c009de382a3e91f404 \
-d '{"odd":["s","l","t","m"], "even":["p","i"," ","e"]}'
#+END_SRC

#+RESULTS:
{"message":"split me"}

#+BEGIN_SRC sh
curl -X POST -u USER:PASS \
https://localhost:join?signature=6edd74450aa9206c4ba0b8c009de382a3e91f404 \
-d '{"odd":["s","l","t","m"], "even":["p","i"," ","e"]}'
#+END_SRC

#+BEGIN_SRC sh
curl -u USER:PASS http://matt-burns.shftbrd.com/lastResponse
#+END_SRC

#+BEGIN_SRC sh
curl -u USER:PASS http://localhost/lastResponse
#+END_SRC

#+BEGIN_SRC sh
curl -u USER:PASS https://localhost/lastResponse
#+END_SRC


#+BEGIN_SRC sh :results output  html
prove -v -I/../Together-Apart/lib t/acceptance.t
#+END_SRC

#+BEGIN_SRC sh
# Subtest: business unit tests.
    1..3
    ok 1 - Odd and even combined into a single numberical sequence
    ok 2 - Numbers split into two sequences these the odd
    ok 3 - Numbers split into two sequence these are the even
ok 1 - business unit tests.
# Subtest: API usage mocking registered auth. see F1, F2, F3, G0, G1, G2, G3, G4, G5, G6
    1..10
    ok 1 - POST http://TBD:TBD@127.0.0.1:35837/split?signature=%3AjQ%C2%BF%C3%87%16%C3%A3j7%C3%A7%19_V%C2%8A%C3%B7u%27%3Fm%22
    ok 2 - 200 OK
    ok 3 - POST http://TBD:TBD@127.0.0.1:35837/split?signature=%3AjQ%C2%BF%C3%87%16%C3%A3j7%C3%A7%19_V%C2%8A%C3%B7u%27%3Fm%22
    ok 4 - 422 Unprocessable Entity
    ok 5 - POST http://TBD:TBD@127.0.0.1:35837/join?signature=%C2%B6D%C3%85%18%3B5%C3%8E%C2%86%0B%0Ef%C3%8D%04%5C%126%C3%94%05%C2%A5%C3%90
    ok 6 - 200 OK
    ok 7 - POST http://TBD:TBD@127.0.0.1:35837/join?signature=%C2%B6D%C3%85%18%3B5%C3%8E%C2%86%0B%0Ef%C3%8D%04%5C%126%C3%94%05%C2%A5%C3%90
    ok 8 - 422 Unprocessable Entity
    ok 9 - GET http://TBD:TBD@127.0.0.1:35837/lastResponse
    ok 10 - Basic auth check on each endpoint called the mock auth webservice
ok 2 - API usage mocking registered auth. see F1, F2, F3, G0, G1, G2, G3, G4, G5, G6
1..2
ok
All tests successful.
Files=1, Tests=2,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.20 cusr  0.02 csys =  0.24 CPU)
Result: PASS
#+END_SRC
* Usage
#+NAME: run-unless-caller
#+BEGIN_SRC perl
sub run {
    app->secrets(['DeletedCodeIsDebuggedCode']);
    app->log->info("starting");
    app->start;
}

run() unless caller();
1;
#+END_SRC
* Configuration
#+NAME: config
#+BEGIN_SRC perl :noweb yes :mkdir yes :tangle ../Together-Apart/lib/Together/Apart.conf
{
 auth_url => 'https://interview-api.shiftboard.com/auth',
 name => 'together_apart',
 register_url => 'https://interview-api.shiftboard.com/register',
 public=> "/home/mburns/projects/bb/shiftboard/docs",

 hypnotoad => {
   pidfile=>"~/together-apart/script/hypnotoad.pid",
   listen  => ['http://*:80', 'https://*:443?cert=/etc/server.crt&key=/etc/server.key'],
   workers => 10
  }
}
#+END_SRC
* Perl Dependencies
#+NAME: dependencies
#+BEGIN_SRC perl
use strict;
use warnings;

package Together::Apart;

use Digest::SHA qw(sha1);
use List::MoreUtils qw(zip);
use Mojo::Asset::File;
use Mojolicious::Lite;
use Mojo::Base "Mojolicious";
use Mojolicious::Static;
use Mojo::URL;

plugin 'Config';
 #+END_SRC
* Release
#+BEGIN_SRC sh
git push origin release-next
#+END_SRC
* Deployment
#+BEGIN_SRC sh :dir /ssh:ubuntu@matt-burns.shftbrd.com:/home/ubuntu/together-apart
git pull origin master
#+END_SRC

#+BEGIN_SRC sh :dir /ssh:ubuntu@matt-burns.shftbrd.com:/home/ubuntu/together-apart
sudo perl -I./lib lib/Together/Apart.pm daemon -l http://[::]:80
#+END_SRC
**  Create Debian Package
#+BEGIN_SRC sh
dzil clean && dzil build
dh-make-perl make  Together-Apart/Together-Apart-0.01
#+END_SRC

#+BEGIN_SRC sh
dpkg together-apart --pre-invoke test-features-absent --post-invoke test-features-present --status-fd ./current-status --build ../dist/
#+END_SRC
** Reverse Proxy Server
In front of app acting as the endpoint accessible by external clients.
 - terminating SSL connections from the outside,
 - limits the number of concurrent open sockets towards the app
 - balancing load across multiple instances,
 - supporting several applications through the same IP/port.
** SSL
#+NAME: host-ssl-config
#+BEGIN_SRC perl
 hypnotoad => {
    listen  => ['https://*:443?cert=/etc/server.crt&key=/etc/server.key'],
    proxy   => 1,
    workers => 10
  }
#+END_SRC
*** starting secure server
#+BEGIN_SRC sh
$ ./script/together_apart daemon -l https://[::]:443
#+END_SRC
** built-in api devops endpoint
Target for github app repo release hook trigger post. Existing running version of the application
sets up and restarts public facing webserver proxying with updated symbolic links for
the site-availabe and sites-enabled point to the next blue green service pair in the the versioned
deployment release chain.
** restart
#+BEGIN_SRC sh
hypnotoad ./script/together_apart
#+END_SRC
** Rolling Deployment
*** Start first version
#+BEGIN_SRC sh
./script/together_apart prefork -P /tmp/first.pid -l http://*:3000?reuse=1
#+END_SRC
*** Start second version
#+BEGIN_SRC sh
./script/together_apart prefork -P /tmp/second.pid -l http://*:3000?reuse=1
#+END_SRC
*** Kill the first version
#+BEGIN_SRC sh
kill -s TERM `cat /tmp/first.pid`
#+END_SRC
* Application  Logic
#+NAME: join-functionality
#+BEGIN_SRC perl :noweb yes
sub together {
    my ($odd, $even) = @_;
    return undef
        unless $odd && $even;
    return undef
        unless (scalar @$odd > 0 && scalar @$even > 0);
    return join '', zip(@$odd, @$even);
}
#+END_SRC

#+NAME: split-functionality
#+BEGIN_SRC perl :noweb yes
sub apart {
    my @array = split('', $_[0]);
    return undef
        unless scalar @array > 0;
    # bitwise AND array position select odd
    my @odd = map {"$_"} @array[grep {!($_ & 1)} 0..$#array];
    # invert logic to take even
    my @even = map {"$_"} @array[grep {($_ & 1)} 0..$#array];
    return {even => \@even, odd => \@odd};
}
#+END_SRC


#+NAME: api-f2
#+BEGIN_SRC perl :noweb yes
    post '/join'=>sub {
        my $c  = shift;
        my $odd =  $c->req->json->{odd};
        my $even =  $c->req->json->{even};
        return $c->render(json=>{message=>"Parameter required"}, status=>422)
            unless $odd && $even;
        my $joined = together($odd, $even);
        $c->session->{'returned_last'}=$joined;
        return $c->render(json=>{message=>$joined}, status=>200);
    };
#+END_SRC


#+NAME: api-f1
#+BEGIN_SRC perl :noweb yes
    post '/split'=>sub {
        my $c  = shift;
        my $split = apart($c->req->json->{string}) || undef;
        return $c->render(json=>{message=>"Parameter Invalid"}, status=>422)
            unless $split;
        $c->session->{'returned_last'} = $split;
        return $c->render(json=>{message=>$split}, status=>200);
    };
#+END_SRC

#+NAME: api-f3
#+BEGIN_SRC perl :noweb yes
get '/lastResponse'=>sub {
    my $c = shift;
    my $last = $c->session->{'returned_last'};
    return $c->render(json=>{message=>$last}, status=>200);
};
#+END_SRC
** Basic Authentication using webservice
*** Code
#+NAME: api-basic-authentication
#+BEGIN_SRC perl :noweb yes
sub check_credentials {
    my $c = shift;
    my ($username, $password) = split(':',  $c->req->url->to_abs->userinfo)
        if $c->req->url->to_abs->userinfo;
    $c->ua->get(Mojo::URL->new($ENV{"auth_url"} || app->config('auth_url'))
                ->query({username=>$username, password=>$password})
                => {Accept=>'application/json'})->res == 200
                ? return 1
                : return 0;
}

sub check_signature {
    my ($signature, $string) = @_;
    $signature && $string && ($signature eq sha1($string))
        ? return 1
        : return 0;
}

under(sub {my $c = shift; # Basic Authentication for each request
           $c->render(json=>{message=>"Invalid"}, status=>401)
               unless check_credentials $c
      });

#+END_SRC
*** Test
#+NAME: auth-testing
#+BEGIN_SRC perl :noweb yes
subtest 'testing registered authentication' => sub {
    plan tests => 2;
    my $module = Test::MockModule->new('Audition::WebService');
    $module->mock('apart', sub { return $desired_apart });
    $module->mock('together', sub { return $desired_together });
    Module::Name::subroutine(@args);
    my $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/split');
    $url->query({signature => $good_signature});
    $t->post_ok($url=>json=>$test_data)->status_is(200);
    $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/join');
    $t->post_ok($url=>json=>$test_data)->status_is(200);
    $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/lastResult');
    $t->post_ok($url=>json=>$test_data)->status_is(200);
};
#+END_SRC

** API Interface
#+NAME: api-interface
#+BEGIN_SRC perl :noweb yes
    <<api-f1>>
    <<api-f2>>

#+END_SRC
*** Error Codes
 - G3 Application Functionality: return 401 on unsuccessful
 - G5 Application Functionality: return 403 on invalid sha1
 - G6 Application Functionality: return 422 on missing parameters
**  API Tests
#+NAME: api-tests
#+BEGIN_SRC perl :noweb yes
    $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/join');
    $t->post_ok($url=>json=>$test_data)->status_is(200);
    my $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/split');
    $url->query({signature => $good_signature});
    $t->post_ok($url=>json=>$test_data)->status_is(200);
    $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/lastResult');
    $t->post_ok($url=>json=>$test_data)->status_is(200);
#+END_SRC
**  Access Management
 #+NAME: user-validation
 #+BEGIN_SRC perl
    under sub { # Valid API Requirement Assertions
        my $c = shift;
        my $signature = $c->param('signature') || undef;
        my $string =  $c->req->json->{string} || undef;
        $c = $c->cookie('together_apart'=>'last', {path=>'/'});
        return $c->render(json=>{message=>"Parameter required)"}, status=>422)
            unless $string;
        return $c->render(json=>{message=>"Checksum failure"}, status=>403)
            unless check_signature($signature, $string);

    };
 #+END_SRC
** Application Code
 #+NAME: app-biz-domain-functionality
 #+BEGIN_SRC perl :noweb yes :mkdir yes :tangle ../Together-Apart/lib/Together/Apart.pm
#ABSTRACT: split join api endpoints
<<dependencies>>

<<split-functionality>>
<<join-functionality>>
<<api-basic-authentication>>

group {
    <<user-validation>>
    <<api-interface>>
};
<<api-f3>>

get '/'=>sub {
    my $c = shift;
    $c->res->headers->content_type('text/html');
    $c->reply->asset(Mojo::Asset::File->new(path => './public/index.html'))
};

get '/org.css'=>sub {
    my $c = shift;
    $c->res->headers->content_type('text/css');
    $c->reply->asset(Mojo::Asset::File->new(path => './public/org.css'));
};

<<run-unless-caller>>
 #+END_SRC
* Test Suite
#+BEGIN_SRC sh
prove -v -I./lib t/acceptance.t
#+END_SRC

#+NAME: app-test-suite
#+BEGIN_SRC perl :noweb yes  :mkdirp yes :tangle ../Together-Apart/t/acceptance.t
use Digest::SHA  qw(sha1);
use Mojo::JSON qw(decode_json encode_json);
use Test::Mojo;
use Test::MockModule;
use Test::More;
use FindBin;
use lib "../lib";

use Together::Apart;

my $desired_together = "split me";
my $desired_apart = {'odd'  => ['s', 'l', 't', 'm'],'even'=>['p', 'i', ' ', 'e'] };
my $apart_got = Together::Apart::apart($desired_together);
my $got_together = Together::Apart::together(['s', 'l', 't', 'm'], ['p', 'i', ' ', 'e']);

subtest 'business unit tests.' => sub {
  plan tests => 3;
  is($got_together, $desired_together, 'Odd and even combined into a single numberical sequence');
  is(@{$apart_got->{odd}}, @{['s', 'l', 't', 'm']}, 'Numbers split into two sequences these the odd');
  is(@{$apart_got->{even}}, @{['p', 'i', ' ', 'e']}, 'Numbers split into two sequence these are the even');
};

my $t = Test::Mojo->new;

subtest 'API usage mocking registered auth. see F1, F2, F3, G0, G1, G2, G3, G4, G5, G6' => sub {
  plan tests => 10;
  my $auth_called = 0;
  my $register_called = 0;
  my $module = Test::MockModule->new('Together::Apart');
  $module->mock('register', sub { $register_called += 1; return 1; });
  Together::Apart::register(@args);

  $module->mock('check_credentials', sub { $auth_called += 1; return 1; });
  Together::Apart::check_credentials(@args);

  my $test_data = {'string'=>$desired_together};
  my $good_signature = sha1($desired_together);

  my $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/split');
  $url->query({signature => $good_signature});
  $t->post_ok($url=>json=>$test_data)->status_is(200);

  $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/split');
  $url->query({signature => $good_signature});
  $t->post_ok($url=>json=>{'bad_string'=>'bad'})->status_is(422);

  $good_signature = sha1($desired_apart);
  $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/join');
  $url->query({signature => $good_signature});
  $t->post_ok($url=>json=>$desired_apart)->status_is(200);

  $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/join');
  $url->query({signature => $good_signature});
  $t->post_ok($url=>json=> {'odd'=>undef, 'even'=>undef})->status_is(422);

  $url = $t->ua->server->url->userinfo('TBD:TBD')->path('/lastResponse');
  $t->get_ok($url);
  is($auth_called, 6, 'Basic auth check on each endpoint called the mock auth webservice');
};

done_testing();
1;

#+END_SRC
* System Integration
** SSL
*** Lets Encrypt - certbot
#+BEGIN_SRC sh
$ sudo apt-get update
$ sudo apt-get install software-properties-common
$ sudo add-apt-repository ppa:certbot/certbot
$ sudo apt-get update
$ sudo apt-get install python-certbot-apache
#+END_SRC
**  Systemd
*** hypnotoad
#+BEGIN_SRC sh
[Unit]
Description=together-apart application
Requires=network.target
After=network.target

[Service]
Type=forking
PIDFile=/home/ubuntu/together-apart/script/hypnotoad.pid
ExecStart=/usr/bin/hypnotoad /home/ubuntu/together-apart/script/together_apart -f
ExecStop=/usr/bin/hypnotoad -s  /home/ubuntu/together-apart/script/together_apart
ExecReload=/usr/bin/hypnotoad /home/ubuntu/together-apart/script/together_apart
KillMode=process

[Install]
WantedBy=multi-user.target
#+END_SRC

#+RESULTS:

*** Reload systemctl daemon
#+BEGIN_SRC sh :dir /sudo::
sudo systemctl --system daemon-reload
#+END_SRC
*** rsyslog
#+BEGIN_SRC ini :dir /sudo:: :mkdir yes /etc/rsyslog.d/together_apart.conf
if $programname == '* Packages
#+END_SRC

 #+BEGIN_SRC sh
sudo apt-get install libmojolicious-perl  libdigest-sha-perl liblist-moreutils-perl libtry-tiny-perl
 #+END_SRC

#+BEGIN_SRC :mkdir yes :tangle ../Together-Apart/dist.ini
name    = Together-Apart
         version = 0.01
         author  = matthewburns@gmail
         license = MIT
         copyright_holder = Matt Burns

[@Basic]

[Prereqs]

Mojolicious     = 7.77
Digest::SHA      = 6.02
List::MoreUtils  = 0.428

[Control::Debian]
#+END_SRC
* Appendix A: TODO
org-mode to document and automate microservice development,  operational and maintainence tasks.
API provides access to the app code block creating devop playbooks.

Application update endpoint targeted by github repo webhooks triggered merge into master,
creates continous delivery feedback loop used deploying new version, handing off
the request handling of the service to the new version.

Debian packages and socket reuse make upgrade to new version while system is running in production.
push system based on ssh and public/private key access.
** Goals
*** manage technical debt (versioning, release, deploy, documentation, test)
*** automatically maintain and update
*** make it easy to run/work on the software
*** checklists to help foster better development security practices
** Design Tasks [20/20]
 - [X] Publishes code into source files
 - [X] Releases the code into the upstream code repository
 - [X] Deploys the code onto the desired runtime platorm (dev, qa, stg, prd)
 - [X] Provisions the runtime infrastructure and like artifacts the application is dependent upon.
 - [X] Capture the functional requirements in automated testable form
 - [X] Understand engineering decisions behind the implementation, design, methodology testing
 - [X] Define the way features are deployed into new versions of this WebService
 - [X] Run tests
 - [X] Provides application documentation
 - [X] Provide development history
 - [X] Provides a reduamentry cli interface to devops/maintence tasks
 - [X] Sets up and runs system from src control repo (github)
 - [X] Provide  way to refer and collaborate among developers
 - [X] Continous Delivery
 - [X] Worksheet to aid in project management aspects of software development
 - [X] Bridge that first draft proof of concept devops task into part of the crm/orchestration process
 - [X] Allows the stitching together of many pre- [-]existing tools (git, dpkg,
 - [X] Incorporate others work via pull requests.
 - [X] Define Idioms
 - [X] Capture domain specific paculiarities
* Appendix B: System 3rd Party Dependencies/Requirements
  - Local: Running in the context of a ordinary linux system account
  - API web application
  - Common library components
  - Github hooks to deploy
* Appendix C: REPL /Debugger
#+BEGIN_SRC sh
perl -d -I../lib  Together-Apart/lib/Together/Apart.pm daemon
#+END_SRC
** Testing G7 - Setting up non sticky environment
#+BEGIN_SRC perl
# Listen on two ports with HTTP and HTTPS at the same time
$daemon->listen(['http://*:3000', 'https://*:4000']);
# Listen on release-next port
# 4461 release-next -> new version
# 4460 master -> existing prd version
my $port = $daemon->listen(['http://127.0.0.1'])->start->ports->[0];
# Run multiple web servers concurrently
my $daemon1 = Mojo::Server::Daemon->new(listen => ['http://*:3000'])->start;
my $daemon2 = Mojo::Server::Daemon->new(listen => ['http://*:4000'])->start;
Mojo::IOLoop->start unless Mojo::IOLoop->is_running;
#+END_SRC
